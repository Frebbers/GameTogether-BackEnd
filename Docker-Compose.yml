# Default environment file (.env) is loaded automatically
# For development: docker-compose up --build
# For production: Create a .env.prod file with real secrets (don't commit this file)
#Then run: docker-compose --env-file .env.prod up --build

x-common-env: &common-env
  ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT}
  ConnectionStrings__DefaultConnection: ${CONNECTION_STRING}
  JwtSettings__SecretKey: ${JWT_SECRET}
  JwtSettings__Issuer: "GameTogether"
  JwtSettings__Audience: "GameTogetherApp"
  EmailSettings__VerificationUrl: ${EMAIL_VERIFICATION_URL}
  EmailSettings__SmtpServer: ${SMTP_SERVER}
  EmailSettings__Port: ${SMTP_PORT}
  EmailSettings__SenderEmail: ${SENDER_EMAIL}
  EmailSettings__SenderPassword: ${SENDER_PASSWORD}
  ASPNETCORE_URLS: ${ASPNETCORE_URLS}
  ASPNETCORE_Kestrel__Certificates__Default__Path: "/https/aspnet-dev.pfx"
  ASPNETCORE_Kestrel__Certificates__Default__Password: ${DB_PASSWORD:-rekt123}
  FrontendBaseUrl: ${FRONTEND_BASE_URL}

services:
  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-rekt123}
      MYSQL_DATABASE: ${DB_NAME:-gametogether}
    ports: ["3306:3306"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 2
      
  cert-generator:
    build:
      context: .
      target: build
    environment:
      - DB_PASSWORD=${DB_PASSWORD:-rekt123}
    working_dir: /src
    command: >
      sh -c "mkdir -p /certs &&
      dotnet dev-certs https --clean &&
      dotnet dev-certs https --trust &&
      dotnet dev-certs https -ep /certs/aspnet-dev.pfx -p ${DB_PASSWORD:-rekt123} &&
      chmod 644 /certs/aspnet-dev.pfx &&
      echo 'Certificate generated successfully' > /certs/cert-complete"
    volumes:
      - certs-volume:/certs

  api:
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    ports: ["5000:8080", "7191:7191"]
    depends_on:
      mysql:
        condition: service_healthy
      cert-generator:
        condition: service_completed_successfully
      migrate:
        condition: service_completed_successfully
    environment: *common-env
    volumes:
      - certs-volume:/https:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:7191/healthz"]
      interval: 10s
      timeout: 5s
      retries: 2

  migrate:
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
      target: build
    depends_on:
      mysql:
        condition: service_healthy
      cert-generator:
        condition: service_completed_successfully
    environment: *common-env
    working_dir: /src
    command: >
      sh -c "dotnet ef database update --project GameTogetherAPI/GameTogetherAPI.csproj --startup-project GameTogetherAPI/GameTogetherAPI.csproj"
    volumes:
      - certs-volume:/https:ro

  test:
    build:
      context: .
      target: build
    depends_on:
      mysql:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      api:
        condition: service_healthy
    environment: *common-env
    command: dotnet test GameTogetherAPI.Test/GameTogetherAPI.Test.csproj --property:WarningLevel=0
    volumes:
      - certs-volume:/https:ro

volumes:
  certs-volume:
